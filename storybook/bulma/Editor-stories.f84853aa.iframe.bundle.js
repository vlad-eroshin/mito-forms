"use strict";(self.webpackChunk_mito_forms_bulma=self.webpackChunk_mito_forms_bulma||[]).push([[408],{"./src/Editor.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Basic: () => (/* binding */ Basic),\n  CollapsibleFieldsets: () => (/* binding */ CollapsibleFieldsets),\n  ConditionalDisplay: () => (/* binding */ ConditionalDisplay),\n  DataSourceUsage: () => (/* binding */ DataSourceUsage),\n  OnePageLayout: () => (/* binding */ OnePageLayout),\n  SwitchComponent: () => (/* binding */ SwitchComponent),\n  TabbedLayout: () => (/* binding */ TabbedLayout),\n  ThrottleChange: () => (/* binding */ ThrottleChange),\n  UnsupportedComponent: () => (/* binding */ UnsupportedComponent),\n  ValuesFromJsonPath: () => (/* binding */ ValuesFromJsonPath),\n  WithListEditor: () => (/* binding */ WithListEditor),\n  WithReducer: () => (/* binding */ WithReducer),\n  __namedExportsOrder: () => (/* binding */ __namedExportsOrder),\n  \"default\": () => (/* binding */ Editor_stories)\n});\n\n// EXTERNAL MODULE: ../../node_modules/.pnpm/@mito-forms+core@0.2.21-beta_typescript@5.8.3/node_modules/@mito-forms/core/dist/index.js + 38 modules\nvar dist = __webpack_require__(\"../../node_modules/.pnpm/@mito-forms+core@0.2.21-beta_typescript@5.8.3/node_modules/@mito-forms/core/dist/index.js\");\n;// ./src/__data__/mockInputObject.json\nconst mockInputObject_namespaceObject = /*#__PURE__*/JSON.parse('{\"path\":{\"to\":{\"fieldsetData\":{\"label\":\"Label Text\",\"value\":\"Value Text\"}}},\"other\":{\"numericValue1\":10,\"textValue\":\"textValue123\"},\"otherPath\":{\"to\":{\"values\":{\"numericValue\":12,\"textValue\":\"Text Value\"}}},\"someData\":{\"to\":{\"listOfOptions\":[{\"label\":\"Label Text 1\",\"value\":1},{\"label\":\"Label Text 2\",\"value\":2},{\"label\":\"Label Text 3\",\"value\":3}],\"checkListOfOptions\":[{\"label\":\"Check Option one\",\"value\":1},{\"label\":\"Check Option two\",\"value\":2},{\"label\":\"Check Option three\",\"value\":3}],\"switchListOfOptions\":[{\"label\":\"Switch Option one\",\"value\":1},{\"label\":\"Switch Option two\",\"value\":2},{\"label\":\"Switch Option three\",\"value\":3}]}}}');\n;// ./src/__metadata__/basic.ts\nconst basicEditor = {\n    displayAs: 'tabSet',\n    forms: [\n        {\n            id: 'form1',\n            title: 'Basic Form',\n            fieldSets: [\n                {\n                    name: 'fieldset1',\n                    fields: [\n                        {\n                            type: 'text',\n                            name: 'label',\n                            label: 'Label',\n                            required: true\n                        },\n                        {\n                            type: 'select',\n                            name: 'selector',\n                            label: 'Select Option',\n                            default: 1,\n                            options: [\n                                {\n                                    label: 'Option 1',\n                                    value: 1\n                                },\n                                {\n                                    label: 'Option 2',\n                                    value: 2\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {}\n};\n\n;// ./src/__metadata__/collapsibleFieldsets.ts\nconst editorWithCollapsibleFieldsets = {\n    displayAs: 'onePage',\n    forms: [\n        {\n            id: 'form',\n            title: 'Collapsible Fieldsets',\n            showTitle: true,\n            fieldSets: [\n                {\n                    name: 'collapsibleFieldSet',\n                    collapsible: true,\n                    collapsed: true,\n                    title: 'Fieldset collapsible',\n                    showTitle: true,\n                    fields: [\n                        {\n                            type: 'text',\n                            name: 'textInput',\n                            label: 'Text input'\n                        },\n                        {\n                            name: 'checkboxInput',\n                            label: 'Select some option',\n                            type: 'checkbox',\n                            options: [\n                                {\n                                    value: 'Check1',\n                                    label: 'Checkbox Option One'\n                                },\n                                {\n                                    value: 'Check2',\n                                    label: 'Checkbox Option Two'\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    name: 'otherFieldSet',\n                    collapsible: true,\n                    collapsed: false,\n                    title: 'Other Fieldset',\n                    showTitle: true,\n                    fields: [\n                        {\n                            type: 'select',\n                            name: 'optionsSelector',\n                            value: 'opt1',\n                            options: [\n                                {\n                                    value: 'opt1',\n                                    label: 'Selector Option One'\n                                },\n                                {\n                                    value: 'opt2',\n                                    label: 'Selector Option Two'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {}\n};\n\n;// ./src/__metadata__/dataSourceUsage.ts\nconst dataSourceUsage = {\n    displayAs: 'tabSet',\n    forms: [\n        {\n            id: 'form1',\n            title: 'Basic Form',\n            fieldSets: [\n                {\n                    name: 'fieldset1',\n                    fields: [\n                        {\n                            type: 'text',\n                            name: 'label',\n                            label: 'Label',\n                            required: true\n                        },\n                        {\n                            type: 'select',\n                            name: 'selector',\n                            label: 'Loading Options from DataSource',\n                            helpText: 'Delayed by 5 seconds',\n                            default: 1,\n                            options: [\n                                {\n                                    label: 'Option 1',\n                                    value: 1\n                                },\n                                {\n                                    label: 'Option 2',\n                                    value: 2\n                                }\n                            ],\n                            dataBindings: [\n                                {\n                                    datasourceId: 'selectorOptions',\n                                    targetProperty: 'options'\n                                }\n                            ]\n                        },\n                        {\n                            type: 'switchList',\n                            name: 'switchList',\n                            label: 'Loading Switch Options from DataSource',\n                            helpText: 'Delayed by 2 seconds',\n                            default: 1,\n                            options: [],\n                            dataBindings: [\n                                {\n                                    datasourceId: 'switchList',\n                                    targetProperty: 'options'\n                                }\n                            ]\n                        },\n                        {\n                            type: 'radio',\n                            name: 'radioList',\n                            label: 'Loading Radio List from DataSource',\n                            helpText: 'Delayed by 3  seconds',\n                            default: 1,\n                            options: [],\n                            dataBindings: [\n                                {\n                                    datasourceId: 'radioList',\n                                    targetProperty: 'options'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {}\n};\n\n;// ./src/__metadata__/editorWithConditions.ts\nconst editorWithConditions = {\n    displayAs: 'onePage',\n    activeForm: 'Form1',\n    forms: [\n        {\n            id: 'Form1',\n            title: 'Form with conditional input Fields and FieldSets',\n            fieldSets: [\n                {\n                    name: 'fieldset2',\n                    title: 'Fieldset With Title',\n                    showTitle: true,\n                    fields: [\n                        {\n                            label: \"Select value (Select 'option2' to show text field)\",\n                            name: 'selector',\n                            type: 'select',\n                            default: '1',\n                            options: [\n                                {\n                                    value: '1',\n                                    label: 'option 1'\n                                },\n                                {\n                                    value: '2',\n                                    label: 'option 2'\n                                }\n                            ]\n                        },\n                        {\n                            label: 'Switch value to Disable Field below',\n                            name: 'switchList',\n                            type: 'switchList',\n                            default: '1',\n                            options: [\n                                {\n                                    value: '1',\n                                    label: 'Disable Text Field One'\n                                },\n                                {\n                                    value: '2',\n                                    label: 'Disable Text Field Two'\n                                },\n                                {\n                                    value: '3',\n                                    label: 'Disable Text Field Three'\n                                }\n                            ]\n                        },\n                        {\n                            name: 'textInputD1',\n                            type: 'text',\n                            value: 'initialValue',\n                            label: 'Text Field One',\n                            required: true,\n                            disabled: `!{_STATE.Form1.fieldset2.data.switchList.contains(@, '1')}`\n                        },\n                        {\n                            name: 'textInputD4',\n                            type: 'text',\n                            value: 'initialValue',\n                            label: 'Text Field Two',\n                            required: true,\n                            disabled: `!{_STATE.Form1.fieldset2.data.switchList.contains(@, '2')}`\n                        },\n                        {\n                            name: 'textInputD3',\n                            type: 'text',\n                            value: 'initialValue',\n                            label: 'Text Field Three',\n                            required: true,\n                            disabled: `!{_STATE.Form1.fieldset2.data.switchList.contains(@, '3')}`\n                        }\n                    ]\n                },\n                {\n                    name: 'fieldset1',\n                    title: 'Other fieldset',\n                    showTitle: true,\n                    fields: [\n                        {\n                            name: 'textInput',\n                            type: 'text',\n                            value: 'initialValue',\n                            label: \"Text input (shown only when 'option2' selected)\",\n                            required: true,\n                            render: `!{_STATE.Form1.fieldset2.data.selector=='2'}`\n                        },\n                        {\n                            name: 'switchInput',\n                            type: 'switch',\n                            label: 'Show yes/no',\n                            value: true\n                        },\n                        {\n                            name: 'oneMoreConditional',\n                            type: 'text',\n                            label: 'Test Label',\n                            render: '!{_STATE.Form1.fieldset1.data.switchInput}'\n                        },\n                        {\n                            name: 'showFieldset3',\n                            type: 'switch',\n                            label: 'Show/Hide FieldSet below',\n                            value: false\n                        }\n                    ]\n                },\n                {\n                    name: 'fieldset3',\n                    title: 'Fieldset Displayed when the Switch is on',\n                    showTitle: true,\n                    render: '!{_STATE.Form1.fieldset1.data.showFieldset3}',\n                    fields: [\n                        {\n                            label: 'Option Selector',\n                            name: 'selectorField',\n                            type: 'select',\n                            default: '1',\n                            options: [\n                                {\n                                    value: '1',\n                                    label: 'Choice One'\n                                },\n                                {\n                                    value: '2',\n                                    label: 'Choice Two'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {}\n};\n\n;// ./src/__metadata__/jsonPathRetrieval.ts\nconst editorWithJsonPath = {\n    displayAs: 'onePage',\n    forms: [\n        {\n            id: 'form',\n            title: 'Form using JSON Path to access values',\n            showTitle: true,\n            fieldSets: [\n                {\n                    title: 'Path to fieldset data ($.path.to.fieldsetData)',\n                    name: 'jsonPathFieldset',\n                    jsonPath: 'path.to.fieldsetData',\n                    showTitle: true,\n                    fields: [\n                        {\n                            type: 'staticText',\n                            label: 'Label',\n                            name: 'label'\n                        },\n                        {\n                            type: 'text',\n                            label: 'Value',\n                            name: 'value'\n                        }\n                    ]\n                },\n                {\n                    title: 'Access data per field',\n                    name: 'jsonPathPerField',\n                    showTitle: true,\n                    fields: [\n                        {\n                            type: 'staticText',\n                            label: 'Access numeric value',\n                            helpText: `other.numericValue1`,\n                            name: 'numericValue',\n                            value: '!{other.numericValue1}'\n                        },\n                        {\n                            type: 'text',\n                            label: 'Text Value',\n                            helpText: 'Json path other.textValue',\n                            name: 'textValue',\n                            value: '!{other.textValue}'\n                        },\n                        {\n                            type: 'select',\n                            name: 'selector',\n                            label: 'Selector ',\n                            helpText: 'Retrieves options from $.someData.to.listOfOptions',\n                            options: '!{someData.to.listOfOptions}',\n                            value: 1\n                        },\n                        {\n                            type: 'checkbox',\n                            name: 'checkboxList',\n                            label: 'Check List',\n                            helpText: 'Options loaded from $.someData.to.listOfOptions',\n                            options: '!{someData.to.listOfOptions}',\n                            value: 1\n                        },\n                        {\n                            type: 'radio',\n                            name: 'radioList',\n                            label: 'Radio buttons',\n                            helpText: 'Retrieves options from ($.someData.to.listOfOptions)',\n                            options: '!{someData.to.listOfOptions}',\n                            value: 1\n                        },\n                        {\n                            type: 'switch',\n                            name: 'switchList',\n                            label: 'Switch List',\n                            helpText: 'Retrieves options from ($.someData.to.switchListOfOptions)',\n                            options: '!{someData.to.switchListOfOptions}',\n                            value: 1\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {}\n};\n\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_arity.js\nfunction _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_pipe.js\nfunction _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isPlaceholder.js\nfunction _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry1.js\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry2.js\n\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry3.js\n\n\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _curry1(function (_c) {\n          return fn(a, b, _c);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n          return fn(_a, _b, c);\n        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b, c);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b, c);\n        }) : _isPlaceholder(c) ? _curry1(function (_c) {\n          return fn(a, b, _c);\n        }) : fn(a, b, c);\n    }\n  };\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isArray.js\n/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\n/* harmony default export */ const _isArray = (Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n});\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isString.js\nfunction _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isArrayLike.js\n\n\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n *      _isArrayLike({nodeType: 1, length: 1}) // => false\n */\nvar _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n  if (!x) {\n    return false;\n  }\n  if (typeof x !== 'object') {\n    return false;\n  }\n  if (_isString(x)) {\n    return false;\n  }\n  if (x.length === 0) {\n    return true;\n  }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n/* harmony default export */ const internal_isArrayLike = (_isArrayLike);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_createReduce.js\n\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\nfunction _createReduce(arrayReduce, methodReduce, iterableReduce) {\n  return function _reduce(xf, acc, list) {\n    if (internal_isArrayLike(list)) {\n      return arrayReduce(xf, acc, list);\n    }\n    if (list == null) {\n      return acc;\n    }\n    if (typeof list['fantasy-land/reduce'] === 'function') {\n      return methodReduce(xf, acc, list, 'fantasy-land/reduce');\n    }\n    if (list[symIterator] != null) {\n      return iterableReduce(xf, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return iterableReduce(xf, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return methodReduce(xf, acc, list, 'reduce');\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_xArrayReduce.js\nfunction _xArrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/bind.js\n\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      const log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\n/* harmony default export */ const es_bind = (bind);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_xReduce.js\n\n\n\nfunction _xIterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\nfunction _xMethodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](es_bind(xf['@@transducer/step'], xf), acc));\n}\nvar _xReduce = /*#__PURE__*/_createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);\n/* harmony default export */ const internal_xReduce = (_xReduce);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_xwrap.js\nvar XWrap = /*#__PURE__*/function () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n  return XWrap;\n}();\nfunction _xwrap(fn) {\n  return new XWrap(fn);\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/reduce.js\n\n\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = /*#__PURE__*/_curry3(function (xf, acc, list) {\n  return internal_xReduce(typeof xf === 'function' ? _xwrap(xf) : xf, acc, list);\n});\n/* harmony default export */ const es_reduce = (reduce);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_checkForMethod.js\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implementation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/slice.js\n\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n/* harmony default export */ const es_slice = (slice);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/tail.js\n\n\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/es_slice(1, Infinity)));\n/* harmony default export */ const es_tail = (tail);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/pipe.js\n\n\n\n\n\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n * @symb R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)\n */\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, es_reduce(_pipe, arguments[0], es_tail(arguments)));\n}\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/reverse.js\n\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = /*#__PURE__*/_curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});\n/* harmony default export */ const es_reverse = (reverse);\n;// ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/compose.js\n\n\n\n/**\n * Performs right-to-left function composition. The last argument may have\n * any arity; the remaining arguments must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      const classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      const yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n * @symb R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)\n */\nfunction compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, es_reverse(arguments));\n}\n;// ./src/__metadata__/staticText.ts\n\nconst staticTextEditor = {\n    activeForm: 'widgetParams',\n    forms: [\n        {\n            id: 'widgetParams',\n            title: 'Form with Reducer',\n            fieldSets: [\n                {\n                    name: 'widgetParams',\n                    jsonPath: 'widgetParams',\n                    fields: [\n                        {\n                            type: 'text',\n                            name: 'label',\n                            label: 'Label',\n                            value: '!{widgetParams.widgetParams.data.label}'\n                        },\n                        {\n                            type: 'text',\n                            name: 'text',\n                            label: 'Value',\n                            value: '!{widgetParams.widgetParams.data.text}'\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {\n        widgetParams: {\n            widgetParams: (editorData, fieldSetData)=>{\n                const setLabel = (label)=>{\n                    return function(data) {\n                        return {\n                            ...data,\n                            widgetParams: {\n                                ...data.widgetParams,\n                                label\n                            }\n                        };\n                    };\n                };\n                const setText = (text)=>{\n                    return function(data) {\n                        return {\n                            ...data,\n                            widgetParams: {\n                                ...data.widgetParams,\n                                text\n                            }\n                        };\n                    };\n                };\n                return compose(setLabel(fieldSetData.label), setText(fieldSetData.text))(editorData);\n            }\n        }\n    }\n};\n\n;// ./src/__metadata__/tabbedLayout.ts\nconst tabbedLayout = {\n    displayAs: 'tabSet',\n    activeForm: 'Form1',\n    forms: [\n        {\n            id: 'Form1',\n            title: 'First Form',\n            fieldSets: [\n                {\n                    name: 'fieldset1',\n                    fields: [\n                        {\n                            name: 'textInput',\n                            type: 'text',\n                            value: 'initialValue',\n                            label: 'Text input',\n                            required: true\n                        },\n                        {\n                            name: 'switchInput',\n                            type: 'switch',\n                            label: 'Switch on/of',\n                            value: true\n                        }\n                    ]\n                },\n                {\n                    name: 'fieldset2',\n                    title: 'Fieldset With Title',\n                    showTitle: true,\n                    fields: [\n                        {\n                            label: 'Select value',\n                            name: 'selector',\n                            type: 'select',\n                            default: '1',\n                            options: [\n                                {\n                                    value: '1',\n                                    label: 'option 1'\n                                },\n                                {\n                                    value: '2',\n                                    label: 'option 2'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            id: 'Form2',\n            title: 'Second Form',\n            fieldSets: [\n                {\n                    name: 'fieldset3',\n                    fields: [\n                        {\n                            name: 'radio',\n                            type: 'radio',\n                            default: '1',\n                            options: [\n                                {\n                                    value: '1',\n                                    label: 'option 1'\n                                },\n                                {\n                                    value: '2',\n                                    label: 'option 2'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    reducersMap: {}\n};\n\n;// ./src/__metadata__/withListEditor.ts\nconst withListEditor = {\n    activeForm: 'widgetParams',\n    displayAs: 'tabSet',\n    forms: [\n        {\n            id: 'widgetParams',\n            title: 'Static Text',\n            fieldSets: [\n                {\n                    name: 'widgetParams',\n                    fields: [\n                        {\n                            type: 'text',\n                            name: 'label',\n                            label: 'Label'\n                        },\n                        {\n                            type: 'text',\n                            name: 'text',\n                            label: 'Value'\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            id: 'listEditor',\n            title: 'List Editor',\n            fieldSets: [\n                {\n                    name: 'fieldset1',\n                    title: 'First Fieldset',\n                    jsonPath: 'fieldset1',\n                    fields: [\n                        {\n                            type: 'text',\n                            name: 'label',\n                            label: 'Label',\n                            required: true\n                        },\n                        {\n                            type: 'select',\n                            name: 'selector',\n                            label: 'Select Option',\n                            default: 1,\n                            options: [\n                                {\n                                    label: 'Option 1',\n                                    value: 1\n                                },\n                                {\n                                    label: 'Option 2',\n                                    value: 2\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    name: 'list',\n                    jsonPath: 'listOfData',\n                    type: 'fieldSetList',\n                    canDeleteRows: true,\n                    showHeader: true,\n                    label: 'Column Types',\n                    rowFieldset: {\n                        name: 'testListEditor',\n                        fields: [\n                            {\n                                type: 'staticText',\n                                name: 'field',\n                                label: 'Field Label'\n                            },\n                            {\n                                type: 'select',\n                                name: 'axisType',\n                                label: 'Axis Types',\n                                options: [\n                                    {\n                                        label: 'Quantitative',\n                                        value: 'quant'\n                                    },\n                                    {\n                                        label: 'Temporal',\n                                        value: 'temp'\n                                    },\n                                    {\n                                        label: 'Ordinal',\n                                        value: 'ordinal'\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    ],\n    reducersMap: {\n        widgetParams: {\n            widgetParams: (editorData, fieldSetData)=>{\n                return {\n                    ...editorData,\n                    widgetParams: {\n                        ...fieldSetData\n                    }\n                };\n            }\n        }\n    }\n};\n\n// EXTERNAL MODULE: ./src/index.tsx + 16 modules\nvar src = __webpack_require__(\"./src/index.tsx\");\n;// ./src/Editor.stories.tsx\n\n\n\n\n\n\n\n\n\n\n\nconst meta = {\n  title: 'BULMA/FORM EDITOR',\n  component: dist/* FormEditorStory */.HA,\n  decorators: [],\n  parameters: {},\n  args: {\n    componentRegistry: src/* BULMA_REGISTRY */.S\n  }\n};\n/* harmony default export */ const Editor_stories = (meta);\nconst Basic = {\n  args: {\n    editorMetadata: {\n      ...basicEditor,\n      reducersMap: {}\n    },\n    initialData: {}\n  }\n};\nconst ThrottleChange = {\n  args: {\n    editorMetadata: {\n      ...basicEditor,\n      reducersMap: {}\n    },\n    throttleChange: true,\n    initialData: {}\n  }\n};\nconst TabbedLayout = {\n  args: {\n    editorMetadata: tabbedLayout,\n    initialData: {}\n  }\n};\nconst OnePageLayout = {\n  args: {\n    editorMetadata: {\n      ...tabbedLayout,\n      forms: [{\n        ...tabbedLayout.forms[0],\n        showTitle: true\n      }, {\n        ...tabbedLayout.forms[1],\n        showTitle: true\n      }],\n      displayAs: 'onePage'\n    },\n    initialData: {}\n  }\n};\nconst ConditionalDisplay = {\n  args: {\n    editorMetadata: editorWithConditions,\n    initialData: {}\n  }\n};\nconst WithReducer = {\n  args: {\n    editorMetadata: staticTextEditor,\n    initialData: {}\n  }\n};\nconst CollapsibleFieldsets = {\n  args: {\n    editorMetadata: editorWithCollapsibleFieldsets,\n    initialData: {}\n  }\n};\nconst ValuesFromJsonPath = {\n  args: {\n    editorMetadata: editorWithJsonPath,\n    initialData: {\n      ...mockInputObject_namespaceObject\n    }\n  }\n};\nconst missingFieldRegistry = {\n  ...src/* BULMA_REGISTRY */.S.inputFields,\n  textbox: undefined\n};\nconst UnsupportedComponent = {\n  args: {\n    editorMetadata: {\n      activeForm: 'test',\n      forms: [{\n        id: 'test',\n        title: 'Test Form',\n        fieldSets: [{\n          name: 'fieldset',\n          fields: [{\n            type: 'textbox',\n            name: 'textBox',\n            value: 'test',\n            label: 'Unsupported field Type'\n          }, {\n            type: 'text',\n            name: 'textInput',\n            value: 'Some Value',\n            label: 'Some other field'\n          }]\n        }]\n      }],\n      reducersMap: {}\n    },\n    componentRegistry: {\n      ...src/* BULMA_REGISTRY */.S,\n      inputFields: missingFieldRegistry\n    },\n    initialData: {\n      ...mockInputObject_namespaceObject\n    }\n  }\n};\nconst WithListEditor = {\n  args: {\n    editorMetadata: {\n      ...withListEditor,\n      reducersMap: {\n        widgetParams: {\n          widgetParams: (editorData, newData) => {\n            return {\n              ...editorData,\n              ...newData\n            };\n          }\n        },\n        listEditor: {\n          fieldset1: (editorData, newData) => {\n            return {\n              ...editorData,\n              fieldset1: newData\n            };\n          },\n          list: (editorData, newData) => {\n            return {\n              ...editorData,\n              listOfData: newData\n            };\n          }\n        }\n      }\n    },\n    initialData: {\n      label: 'Label',\n      text: 'Text',\n      listOfData: [{\n        field: 'Speed',\n        axisType: 'quant'\n      }, {\n        field: 'Date',\n        axisType: 'temp'\n      }, {\n        field: 'Color',\n        axisType: 'ordinal'\n      }]\n    }\n  }\n};\nconst SwitchComponent = {\n  args: {\n    editorMetadata: {\n      displayAs: 'tabSet',\n      activeForm: 'form',\n      forms: [{\n        id: 'form',\n        title: 'Form Tab',\n        showTitle: true,\n        fieldSets: [{\n          title: 'Some Fieldset Title',\n          name: 'fieldsetWithSwitchList',\n          showTitle: true,\n          fieldsLayout: 'twoColumn',\n          fields: [{\n            type: 'switch',\n            name: 'switchList',\n            label: 'Switch List',\n            options: [{\n              label: 'Switch One',\n              value: 'one'\n            }, {\n              label: 'Switch Two',\n              value: 'two'\n            }, {\n              label: 'Switch Three',\n              value: 'three'\n            }, {\n              label: 'Switch Four',\n              value: 'four'\n            }],\n            value: '!{objectOfSomeKind.switchValues}'\n          }, {\n            type: 'checkbox',\n            name: 'checkList',\n            label: 'Check List',\n            options: [{\n              label: 'Check One',\n              value: 1\n            }, {\n              label: 'Check Two',\n              value: 2\n            }, {\n              label: 'Check Three',\n              value: 3\n            }, {\n              label: 'Check Four',\n              value: 4\n            }],\n            value: '!{objectOfSomeKind.checkValues}'\n          }]\n        }]\n      }],\n      reducersMap: {\n        form: {\n          fieldsetWithSwitchList: (editorData, newData) => {\n            return {\n              ...editorData,\n              objectOfSomeKind: {\n                ...editorData.objectOfSomeKind,\n                switchValues: newData.switchList,\n                checkValues: newData.checkList\n              }\n            };\n          }\n        }\n      }\n    },\n    initialData: {\n      objectOfSomeKind: {\n        switchValues: ['two', 'three'],\n        checkValues: [2, 4]\n      }\n    }\n  }\n};\nconst DataSourceUsage = {\n  args: {\n    editorMetadata: dataSourceUsage,\n    initialData: {},\n    delayDataSource: {\n      selectorOptions: 5000,\n      switchList: 2000,\n      radioList: 3000\n    },\n    dataSourceStates: {\n      selectorOptions: {\n        resultFormat: dist/* ResultFormat */.fW.RecordsArray,\n        data: [{\n          label: 'Option 1',\n          value: 1\n        }, {\n          label: 'Option 2',\n          value: 2\n        }, {\n          label: 'Option 3',\n          value: 3\n        }, {\n          label: 'Option 4',\n          value: 4\n        }, {\n          label: 'Option 5',\n          value: 5\n        }, {\n          label: 'Option 6',\n          value: 6\n        }, {\n          label: 'Option 7',\n          value: 7\n        }, {\n          label: 'Option 8',\n          value: 8\n        }, {\n          label: 'Option 9',\n          value: 9\n        }, {\n          label: 'Option 10',\n          value: 10\n        }],\n        id: 'selectorOptions',\n        status: dist/* DataStatus */.t3.Loading\n      },\n      switchList: {\n        resultFormat: dist/* ResultFormat */.fW.RecordsArray,\n        data: [{\n          label: 'Switch 1',\n          value: 1\n        }, {\n          label: 'Switch 2',\n          value: 2\n        }, {\n          label: 'Switch 3',\n          value: 3\n        }, {\n          label: 'Switch 4',\n          value: 4\n        }, {\n          label: 'Switch 5',\n          value: 5\n        }, {\n          label: 'Switch 6',\n          value: 6\n        }, {\n          label: 'Switch 7',\n          value: 7\n        }],\n        id: 'switchList',\n        status: dist/* DataStatus */.t3.Loading\n      },\n      radioList: {\n        resultFormat: dist/* ResultFormat */.fW.RecordsArray,\n        data: [{\n          label: 'Radio Option 1',\n          value: 1\n        }, {\n          label: 'Radio Option 2',\n          value: 2\n        }, {\n          label: 'Radio Option 3',\n          value: 3\n        }, {\n          label: 'Radio Option 4',\n          value: 4\n        }, {\n          label: 'Radio Option 5',\n          value: 5\n        }],\n        id: 'radioList',\n        status: dist/* DataStatus */.t3.Loading\n      }\n    }\n  }\n};\n;\nconst __namedExportsOrder = [\"Basic\", \"ThrottleChange\", \"TabbedLayout\", \"OnePageLayout\", \"ConditionalDisplay\", \"WithReducer\", \"CollapsibleFieldsets\", \"ValuesFromJsonPath\", \"UnsupportedComponent\", \"WithListEditor\", \"SwitchComponent\", \"DataSourceUsage\"];\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: {\\n      ...basicEditor,\\n      reducersMap: {}\\n    },\\n    initialData: {}\\n  }\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nThrottleChange.parameters = {\n  ...ThrottleChange.parameters,\n  docs: {\n    ...ThrottleChange.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: {\\n      ...basicEditor,\\n      reducersMap: {}\\n    },\\n    throttleChange: true,\\n    initialData: {}\\n  }\\n}\",\n      ...ThrottleChange.parameters?.docs?.source\n    }\n  }\n};\nTabbedLayout.parameters = {\n  ...TabbedLayout.parameters,\n  docs: {\n    ...TabbedLayout.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: tabbedLayout,\\n    initialData: {}\\n  }\\n}\",\n      ...TabbedLayout.parameters?.docs?.source\n    }\n  }\n};\nOnePageLayout.parameters = {\n  ...OnePageLayout.parameters,\n  docs: {\n    ...OnePageLayout.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: {\\n      ...tabbedLayout,\\n      forms: [{\\n        ...tabbedLayout.forms[0],\\n        showTitle: true\\n      }, {\\n        ...tabbedLayout.forms[1],\\n        showTitle: true\\n      }],\\n      displayAs: 'onePage'\\n    },\\n    initialData: {}\\n  }\\n}\",\n      ...OnePageLayout.parameters?.docs?.source\n    }\n  }\n};\nConditionalDisplay.parameters = {\n  ...ConditionalDisplay.parameters,\n  docs: {\n    ...ConditionalDisplay.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: editorWithConditions,\\n    initialData: {}\\n  }\\n}\",\n      ...ConditionalDisplay.parameters?.docs?.source\n    }\n  }\n};\nWithReducer.parameters = {\n  ...WithReducer.parameters,\n  docs: {\n    ...WithReducer.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: staticTextEditor,\\n    initialData: {}\\n  }\\n}\",\n      ...WithReducer.parameters?.docs?.source\n    }\n  }\n};\nCollapsibleFieldsets.parameters = {\n  ...CollapsibleFieldsets.parameters,\n  docs: {\n    ...CollapsibleFieldsets.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: editorWithCollapsibleFieldsets,\\n    initialData: {}\\n  }\\n}\",\n      ...CollapsibleFieldsets.parameters?.docs?.source\n    }\n  }\n};\nValuesFromJsonPath.parameters = {\n  ...ValuesFromJsonPath.parameters,\n  docs: {\n    ...ValuesFromJsonPath.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: editorWithJsonPath,\\n    initialData: {\\n      ...INPUT_DATA\\n    }\\n  }\\n}\",\n      ...ValuesFromJsonPath.parameters?.docs?.source\n    }\n  }\n};\nUnsupportedComponent.parameters = {\n  ...UnsupportedComponent.parameters,\n  docs: {\n    ...UnsupportedComponent.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: {\\n      activeForm: 'test',\\n      forms: [{\\n        id: 'test',\\n        title: 'Test Form',\\n        fieldSets: [{\\n          name: 'fieldset',\\n          fields: [{\\n            type: 'textbox',\\n            name: 'textBox',\\n            value: 'test',\\n            label: 'Unsupported field Type'\\n          }, {\\n            type: 'text',\\n            name: 'textInput',\\n            value: 'Some Value',\\n            label: 'Some other field'\\n          }]\\n        }]\\n      }],\\n      reducersMap: {}\\n    },\\n    componentRegistry: {\\n      ...BULMA_REGISTRY,\\n      inputFields: missingFieldRegistry as InputFieldRegistry\\n    },\\n    initialData: {\\n      ...INPUT_DATA\\n    }\\n  }\\n}\",\n      ...UnsupportedComponent.parameters?.docs?.source\n    }\n  }\n};\nWithListEditor.parameters = {\n  ...WithListEditor.parameters,\n  docs: {\n    ...WithListEditor.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: {\\n      ...withListEditor,\\n      reducersMap: {\\n        widgetParams: {\\n          widgetParams: (editorData: object, newData: ParamsMap) => {\\n            return {\\n              ...editorData,\\n              ...newData\\n            };\\n          }\\n        },\\n        listEditor: {\\n          fieldset1: (editorData: object, newData: ParamsMap) => {\\n            return {\\n              ...editorData,\\n              fieldset1: newData\\n            };\\n          },\\n          list: (editorData: object, newData: ParamsMap) => {\\n            return {\\n              ...editorData,\\n              listOfData: newData\\n            };\\n          }\\n        }\\n      }\\n    },\\n    initialData: {\\n      label: 'Label',\\n      text: 'Text',\\n      listOfData: [{\\n        field: 'Speed',\\n        axisType: 'quant'\\n      }, {\\n        field: 'Date',\\n        axisType: 'temp'\\n      }, {\\n        field: 'Color',\\n        axisType: 'ordinal'\\n      }]\\n    }\\n  }\\n}\",\n      ...WithListEditor.parameters?.docs?.source\n    }\n  }\n};\nSwitchComponent.parameters = {\n  ...SwitchComponent.parameters,\n  docs: {\n    ...SwitchComponent.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: {\\n      displayAs: 'tabSet',\\n      activeForm: 'form',\\n      forms: [{\\n        id: 'form',\\n        title: 'Form Tab',\\n        showTitle: true,\\n        fieldSets: [{\\n          title: 'Some Fieldset Title',\\n          name: 'fieldsetWithSwitchList',\\n          showTitle: true,\\n          fieldsLayout: 'twoColumn',\\n          fields: [{\\n            type: 'switch',\\n            name: 'switchList',\\n            label: 'Switch List',\\n            options: [{\\n              label: 'Switch One',\\n              value: 'one'\\n            }, {\\n              label: 'Switch Two',\\n              value: 'two'\\n            }, {\\n              label: 'Switch Three',\\n              value: 'three'\\n            }, {\\n              label: 'Switch Four',\\n              value: 'four'\\n            }],\\n            value: '!{objectOfSomeKind.switchValues}'\\n          }, {\\n            type: 'checkbox',\\n            name: 'checkList',\\n            label: 'Check List',\\n            options: [{\\n              label: 'Check One',\\n              value: 1\\n            }, {\\n              label: 'Check Two',\\n              value: 2\\n            }, {\\n              label: 'Check Three',\\n              value: 3\\n            }, {\\n              label: 'Check Four',\\n              value: 4\\n            }],\\n            value: '!{objectOfSomeKind.checkValues}'\\n          }]\\n        }]\\n      }],\\n      reducersMap: {\\n        form: {\\n          fieldsetWithSwitchList: (editorData: {\\n            objectOfSomeKind: object;\\n          }, newData: {\\n            switchList: string[];\\n            checkList: number[];\\n          }) => {\\n            return {\\n              ...editorData,\\n              objectOfSomeKind: {\\n                ...editorData.objectOfSomeKind,\\n                switchValues: newData.switchList,\\n                checkValues: newData.checkList\\n              }\\n            };\\n          }\\n        }\\n      }\\n    },\\n    initialData: {\\n      objectOfSomeKind: {\\n        switchValues: ['two', 'three'],\\n        checkValues: [2, 4]\\n      }\\n    }\\n  }\\n}\",\n      ...SwitchComponent.parameters?.docs?.source\n    }\n  }\n};\nDataSourceUsage.parameters = {\n  ...DataSourceUsage.parameters,\n  docs: {\n    ...DataSourceUsage.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    editorMetadata: dataSourceUsage,\\n    initialData: {},\\n    delayDataSource: {\\n      selectorOptions: 5000,\\n      switchList: 2000,\\n      radioList: 3000\\n    },\\n    dataSourceStates: {\\n      selectorOptions: {\\n        resultFormat: ResultFormat.RecordsArray,\\n        data: [{\\n          label: 'Option 1',\\n          value: 1\\n        }, {\\n          label: 'Option 2',\\n          value: 2\\n        }, {\\n          label: 'Option 3',\\n          value: 3\\n        }, {\\n          label: 'Option 4',\\n          value: 4\\n        }, {\\n          label: 'Option 5',\\n          value: 5\\n        }, {\\n          label: 'Option 6',\\n          value: 6\\n        }, {\\n          label: 'Option 7',\\n          value: 7\\n        }, {\\n          label: 'Option 8',\\n          value: 8\\n        }, {\\n          label: 'Option 9',\\n          value: 9\\n        }, {\\n          label: 'Option 10',\\n          value: 10\\n        }],\\n        id: 'selectorOptions',\\n        status: DataStatus.Loading\\n      },\\n      switchList: {\\n        resultFormat: ResultFormat.RecordsArray,\\n        data: [{\\n          label: 'Switch 1',\\n          value: 1\\n        }, {\\n          label: 'Switch 2',\\n          value: 2\\n        }, {\\n          label: 'Switch 3',\\n          value: 3\\n        }, {\\n          label: 'Switch 4',\\n          value: 4\\n        }, {\\n          label: 'Switch 5',\\n          value: 5\\n        }, {\\n          label: 'Switch 6',\\n          value: 6\\n        }, {\\n          label: 'Switch 7',\\n          value: 7\\n        }],\\n        id: 'switchList',\\n        status: DataStatus.Loading\\n      },\\n      radioList: {\\n        resultFormat: ResultFormat.RecordsArray,\\n        data: [{\\n          label: 'Radio Option 1',\\n          value: 1\\n        }, {\\n          label: 'Radio Option 2',\\n          value: 2\\n        }, {\\n          label: 'Radio Option 3',\\n          value: 3\\n        }, {\\n          label: 'Radio Option 4',\\n          value: 4\\n        }, {\\n          label: 'Radio Option 5',\\n          value: 5\\n        }],\\n        id: 'radioList',\\n        status: DataStatus.Loading\\n      }\\n    }\\n  }\\n}\",\n      ...DataSourceUsage.parameters?.docs?.source\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Editor.stories.tsx\n")}}]);